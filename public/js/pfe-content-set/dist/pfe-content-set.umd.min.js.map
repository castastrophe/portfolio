{"version":3,"file":"pfe-content-set.umd.min.js","sources":["../_temp/polyfills--pfe-content-set.js","../_temp/pfe-content-set.umd.js"],"sourcesContent":["// @POLYFILL  NodeList.prototype.forEach()\n// https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach\nif (window.NodeList && !NodeList.prototype.forEach) {\n  NodeList.prototype.forEach = function(callback, thisArg) {\n    thisArg = thisArg || window;\n    for (var i = 0; i < this.length; i++) {\n      callback.call(thisArg, this[i], i, this);\n    }\n  };\n}\n\n// @POLYFILL  Object.prototype.assign()\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill\nif (typeof Object.assign !== \"function\") {\n  // Must be writable: true, enumerable: false, configurable: true\n  Object.defineProperty(Object, \"assign\", {\n    value: function assign(target, varArgs) {\n      // .length of function is 2\n      \"use strict\";\n      if (target === null || target === undefined) {\n        throw new TypeError(\"Cannot convert undefined or null to object\");\n      }\n\n      var to = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var nextSource = arguments[index];\n\n        if (nextSource !== null && nextSource !== undefined) {\n          for (var nextKey in nextSource) {\n            // Avoid bugs when hasOwnProperty is shadowed\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n      return to;\n    },\n    writable: true,\n    configurable: true\n  });\n}\n","/*!\n * PatternFly Elements: PfeContentSet 1.3.0\n * @license\n * Copyright 2021 Red Hat, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n*/\n\n// Import polyfills: matches, closest, includes, assign\nimport \"./polyfills--pfe-content-set.js\";\n\nimport PFElement from \"../../pfelement/dist/pfelement\";\nimport PfeAccordion from \"../../pfe-accordion/dist/pfe-accordion\";\nimport PfeTabs from \"../../pfe-tabs/dist/pfe-tabs\";\n\nconst CONTENT_MUTATION_CONFIG = {\n  characterData: true,\n  childList: true,\n  subtree: true\n};\nclass PfeContentSet extends PFElement {\n\n  // Injected at build-time\n  static get version() {\n    return \"1.3.0\";\n  }\n\n  // Injected at build-time\n  get html() {\n    return `\n<style>:host{display:block}::slotted(:not(pfe-accordion,pfe-tabs)),::slotted([hidden]),:host([hidden]),[hidden]{display:none!important} /*# sourceMappingURL=pfe-content-set.min.css.map */</style>\n<slot id=\"lightdom\" hidden></slot>\n<slot name=\"_view\" private></slot>`;\n  }\n\n  static get tag() {\n    return \"pfe-content-set\";\n  }\n\n  get templateUrl() {\n    return \"pfe-content-set.html\";\n  }\n\n  get styleUrl() {\n    return \"pfe-content-set.scss\";\n  }\n\n  static get meta() {\n    return {\n      title: \"Content set\",\n      description:\n        \"This element creates a flexible component that renders an accordion or tabset depending on screen size.\"\n    };\n  }\n\n  static get pfeType() {\n    return PFElement.pfeType.combo;\n  }\n\n  /**\n   * Property definitions for Content set combine the options available for Tabs & Accordion\n   */\n  static get properties() {\n    // @TODO: Move this logic to pfelement\n\n    // This removes observers that live in the dependent components\n    // and cascades the property to the relevant component if it's not\n    // an aliased property (just cascade the source of truth instead of both)\n    const inheritProperties = (obj, tagName) => {\n      let newObj = Object.assign({}, obj);\n      for (const [key, value] of Object.entries(newObj)) {\n        // Delete the observer from the property\n        if (value.observer) delete newObj[key].observer;\n        if (value.cascade) delete newObj[key].cascade;\n\n        // If alias exists, don't add cascade\n        if (!value.alias) newObj[key].cascade = tagName;\n      }\n      return newObj;\n    };\n\n    // Set up the inheritance for tabs and accordion\n    let tabProps = inheritProperties(PfeTabs.properties, PfeTabs.tag);\n    let accordionProps = inheritProperties(PfeAccordion.properties, PfeAccordion.tag);\n\n    // Merge these two sets of properties\n    const dependentProps = Object.assign(tabProps, accordionProps);\n\n    // Assign these values to the combo along with it's own properties\n    return Object.assign(dependentProps, {\n      breakpoint: {\n        title: \"Custom breakpoint\",\n        type: String,\n        observer: \"_updateBreakpoint\"\n      },\n      // @TODO: Deprecated in 1.0\n      align: {\n        type: String,\n        enum: [\"center\"],\n        alias: \"tabAlign\"\n      },\n      oldAlign: {\n        attr: \"pfe-align\",\n        alias: \"tabAlign\"\n      },\n      // @TODO: Deprecated in 1.0\n      oldBreakpoint: {\n        type: String,\n        alias: \"breakpoint\",\n        attr: \"pfe-breakpoint\"\n      },\n      // @TODO: Deprecated in 1.0\n      pfeId: {\n        type: String,\n        attr: \"pfe-id\",\n        observer: \"_copyToId\"\n      }\n    });\n  }\n\n  /**\n   * Schema definition for slotted content\n   * Useful for CMS dynamic imports of components\n   */\n  static get slots() {\n    return {\n      default: {\n        title: \"Default\",\n        type: \"array\",\n        namedSlot: false,\n        items: {\n          $ref: \"raw\"\n        }\n      }\n    };\n  }\n\n  /**\n   * Getter: should this be rendered as a tabset based on the breakpoint size\n   * @returns {boolean} Is this a tabset?\n   */\n  get isTab() {\n    let breakpointValue = this.breakpoint ? parseInt(this.breakpoint.replace(/\\D/g, \"\")) : 700;\n    return this.parentNode ? this.parentNode.offsetWidth > breakpointValue : window.outerWidth > breakpointValue;\n  }\n\n  /**\n   * Getter: Capture all components in the _view slot\n   * @returns {NodeList} All components in the _view slot\n   */\n  get viewAll() {\n    return this.querySelectorAll(`[slot=\"_view\"]`);\n  }\n\n  /**\n   * Getter: Capture the rendering component from the _view slot\n   * @returns {NodeItem} The rendering component from the _view slot\n   */\n  get view() {\n    let views = [...this.viewAll].filter(view => [PfeTabs.tag, PfeAccordion.tag].includes(view.tagName.toLowerCase()));\n    if (views.length <= 0) return null;\n    return views[0];\n  }\n\n  /**\n   * Getter: Capture the tabs component from the _view slot (if it exists)\n   * @returns {NodeItem} The tabs component from the _view slot\n   */\n  get tabs() {\n    return this.querySelector(`pfe-tabs[slot=\"_view\"]`);\n  }\n\n  /**\n   * Getter: Capture the accordion component from the _view slot (if it exists)\n   * @returns {NodeItem} The accordion component from the _view slot\n   */\n  get accordion() {\n    return this.querySelector(`pfe-accordion[slot=\"_view\"]`);\n  }\n\n  /**\n   * Getter: Validates the incoming light DOM for some usable content\n   * @returns {boolean} Returns true if some usable light DOM exists\n   */\n  get hasValidLightDOM() {\n    // If any light DOM exists, validate it meets the requirements for rendering\n    if (this.hasLightDOM()) {\n      let content = this.shadowRoot.querySelector(`slot#lightdom`);\n      let valid = false;\n      // Loop through the assigned nodes\n      content.assignedNodes().forEach(node => {\n        // Validate that any non-text nodes have the right attributes present\n        // They don't have to be in the right order, just that they exist at all lets us progress\n        if (node.nodeName !== \"#text\" && (this._isHeader(node) || this._isPanel(node))) valid = true;\n      });\n      return valid;\n    } else return false;\n  }\n\n  constructor() {\n    super(PfeContentSet);\n\n    this.isIE11 = !!window.MSInputMethodContext && !!document.documentMode;\n\n    this.build = this.build.bind(this);\n\n    this._mutationHandler = this._mutationHandler.bind(this);\n    this._resizeHandler = this._resizeHandler.bind(this);\n\n    this._cleanSet = this._cleanSet.bind(this);\n\n    this._observer = new MutationObserver(this._mutationHandler);\n    if (window.ResizeObserver) this._resizeObserver = new ResizeObserver(this._resizeHandler);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    // If the element has an ID, postfix container\n    if (this.id) this.id = `${this.id}-container`;\n\n    // Validate that the light DOM data exists before building\n    if (this.hasValidLightDOM)\n      this.build().then(\n        () => {\n          // If the browser supports the resizeObserver and the parentElement exists, set to observe\n          if (window.ResizeObserver && this.parentElement) this._resizeObserver.observe(this.parentElement);\n        },\n        errorMsg => {\n          this.error(`There was an issue building the component: ${errorMsg}`);\n        }\n      );\n\n    // Attach the mutation observer\n    this._observer.observe(this, CONTENT_MUTATION_CONFIG);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this._observer.disconnect();\n    if (window.ResizeObserver) this._resizeObserver.disconnect();\n  }\n\n  /**\n   * Fetch the component if it exists in the right upgrade form\n   * otherwise, remove the old element and build a new version\n   * @returns {NodeItem} New or existing rendering component\n   */\n  build() {\n    return new Promise((resolve, reject) => {\n      // Get the name of the expected component\n      let componentName = this.isTab ? PfeTabs.tag : PfeAccordion.tag;\n\n      // If the upgraded component matches the tag name of the expected rendering component, return now;\n      if (this.view) {\n        if (this.view && this.view.tagName.toLowerCase() === componentName) return resolve(this.view);\n\n        // One option was to just remove the existing element: existingEl.remove();\n        // But it seems safer to clear out the entire slot to make sure nothing snuck in unexpectedly\n        this.viewAll.forEach(item => item.remove());\n      }\n\n      // If there was no rendering component or it was the wrong one (and thus removed), create one!\n      let newEl = document.createElement(componentName);\n      newEl.setAttribute(\"slot\", \"_view\");\n      if (this.id) newEl.id = this.id.replace(/-container$/, \"\");\n      this.appendChild(newEl);\n\n      // Fire the build of the internals for the new component\n      return this._build().then(() => resolve(newEl));\n    });\n  }\n\n  /**\n   * Mutation handler\n   * Read in and parse the mutation list, rebuilding as necessary\n   */\n  _mutationHandler(mutationsList) {\n    if (!this.isIE11 && mutationsList) {\n      for (let mutation of mutationsList) {\n        switch (mutation.type) {\n          case \"childList\":\n            if (mutation.addedNodes) {\n              // Check the added nodes to make sure it's not assigned to the _upgradeComponent slot\n              let nodes = [...mutation.addedNodes].filter(item => !item.hasAttribute(\"slot\"));\n              if (nodes.length > 0) this._build(nodes);\n            }\n            if (mutation.removedNodes) {\n              // Check the added nodes to make sure it's not assigned to the _upgradeComponent slot\n              let nodes = [...mutation.removedNodes].filter(item => !item.hasAttribute(\"slot\"));\n              if (nodes.length > 0) this._removeNodes(nodes);\n            }\n            break;\n          case \"characterData\":\n            if (mutation.target && mutation.target.parentNode)\n              this._updateNode(mutation.target.parentNode, mutation.target.textContent);\n            break;\n        }\n      }\n\n      return;\n    }\n\n    // If no mutation list is provided, rebuild the whole thing\n    this._build();\n  }\n\n  /**\n   * Checks if the element provided is a header region\n   * @returns {boolean} True if the element provided is a header region\n   */\n  _isHeader(el) {\n    return el.hasAttribute(`${this.tag}--header`) || el.tagName.match(/H[1-6]/);\n  }\n\n  /**\n   * Checks if the element provided is a panel region\n   * @returns {boolean} True if the element provided is a panel region\n   */\n  _isPanel(el) {\n    return el.hasAttribute(`${this.tag}--panel`);\n  }\n\n  /**\n   * Reflect the removal of nodes from light DOM into the rendered view\n   */\n  _removeNodes(list) {\n    list.forEach(item => this._removeNode(item));\n\n    // If a container doesn't exist, escape now\n    if (!this.view) return;\n\n    // Check if the container is empty, hide\n    if (!this.view.hasChildNodes()) this.view.setAttribute(\"hidden\", \"\");\n    else this.view.removeAttribute(\"hidden\");\n  }\n\n  /**\n   * Find a connection between a node in light DOM that was added or removed\n   * and the matching node in the rendered component; this makes upgrades more\n   * efficient so we're not rebuilding everything every time.\n   * @returns {Node} Returns the node in the rendered component that maps to the light DOM node provided\n   */\n  _findConnection(node) {\n    let connection = null;\n\n    if (!this.view) return connection;\n\n    // If this node is mapped to one in the upgraded component\n    if (node.nodeName !== \"#text\" && node.hasAttribute(\"maps-to\")) {\n      const id = node.getAttribute(\"maps-to\");\n      if (!id) return connection;\n\n      connection = this.view.querySelector(`#${id}`);\n      if (!connection) this.warn(`no element could be found with #${id}`);\n    }\n\n    // Return the connection\n    return connection;\n  }\n\n  /**\n   * Reflect the removal of a node from light DOM into the rendered view\n   */\n  _removeNode(node) {\n    if (!this.view) return;\n\n    const connection = _findConnection(node);\n    if (connection) this.view.removeChild(connection);\n    // Fire a full rebuild if it can't determine the mapped element\n    else this._build();\n  }\n\n  _updateNode(node, textContent) {\n    if (!this.view) this.build();\n\n    const connection = _findConnection(node);\n    if (connection) connection.textContent = textContent;\n    // Fire a full rebuild if it can't determine the mapped element\n    else this._build();\n  }\n\n  _buildSets(sets, template) {\n    sets = this._cleanSet(sets);\n    let fragment = document.createDocumentFragment();\n\n    for (let i = 0; i < sets.length; i = i + 2) {\n      let header = sets[i];\n      let panel = sets[i + 1];\n\n      // Set up the template for the sets of content\n      const wrapper = document.createElement(\"template\");\n      wrapper.innerHTML = template.trim();\n      const templateMarkup = wrapper.content.cloneNode(true);\n\n      if (!header) this.warn(`no element found at position ${i} of the light DOM input.`);\n      if (!panel) this.warn(`no element found at position ${i + 1} of the light DOM input.`);\n\n      if (header && this._isHeader(header) && panel && this._isPanel(panel)) {\n        // Capture the line-item from the template\n        [header, panel].forEach((region, idx) => {\n          const section = idx === 0 ? \"header\" : \"panel\";\n\n          let piece = templateMarkup.querySelector(`[content-type=\"${section}\"]`).cloneNode(true);\n\n          // Remove the section from the ID name in case it was already upgraded\n          let regionId = region.id;\n          if (region.hasAttribute(\"upgraded\") && regionId) {\n            regionId = regionId.replace(new RegExp(`--${section}$`), \"\");\n          }\n          // Capture the ID from the region, the pfe-id, or generate a random one\n          const id = regionId || region.getAttribute(\"pfe-id\") || this.randomId;\n\n          // Update the region ID with a postfix to prevent duplication\n          if (region.id) region.id = `${regionId}--${section}`;\n          // Flag that this element was upgraded\n          region.setAttribute(\"upgraded\", \"\");\n\n          const clone = region.cloneNode(true);\n\n          // Remove the flag from the clone\n          clone.removeAttribute(`${this.tag}--${section}`);\n\n          // Append a clone of the region to the template item\n          piece.appendChild(clone);\n\n          // Flag light DOM as upgraded\n          region.setAttribute(\"maps-to\", id);\n          piece.id = id;\n\n          // Attach the template item to the fragment\n          fragment.appendChild(piece);\n        });\n      }\n    }\n\n    return fragment;\n  }\n\n  _cleanSet(set) {\n    return [...set].filter(item => item !== this.view);\n  }\n\n  _build(addedNodes) {\n    return new Promise((resolve, reject) => {\n      // Disconnect the observer while we parse it\n      this._observer.disconnect();\n\n      // Check if the appropriate tag exists already\n      if (!this.view) {\n        return reject(`No rendering container was found.`);\n      }\n\n      const template = this.view.tag === \"pfe-tabs\" ? PfeTabs.contentTemplate : PfeAccordion.contentTemplate;\n      // If no id is present, give it the id from the wrapper\n      if (!this.view.id) this.view.id = this.id || this.pfeId || this.randomId;\n\n      const rawSets = addedNodes ? addedNodes : this.children ? this.children : null;\n\n      // Clear out the content of the host if we're using the full child list\n      if (!addedNodes && rawSets) this.view.innerHTML = \"\";\n\n      // If sets is not null, build them using the template\n      if (rawSets) {\n        let sets = this._buildSets(rawSets, template);\n        if (sets) this.view.appendChild(sets);\n      }\n\n      // Wait until the tabs upgrade before setting the selectedIndex value\n      Promise.all([customElements.whenDefined(PfeTabs.tag)]).then(() => {\n        // pass the selectedIndex property down from pfe-content-set\n        // to pfe-tabs if there is a selectedIndex value that's not 0\n        if (this.isTab) {\n          // Pass the selectedIndex down to the tabset\n          if (this.selectedIndex) {\n            this.view.selectedIndex = this.selectedIndex;\n          }\n        }\n      });\n\n      // Attach the mutation observer\n      this._observer.observe(this, CONTENT_MUTATION_CONFIG);\n\n      return resolve();\n    });\n  }\n\n  _copyToId() {\n    // Don't overwrite an existing ID but backwards support pfe-id\n    if (!this.id) this.id = this.pfeId;\n  }\n\n  _resizeHandler() {\n    this.build();\n  }\n\n  _updateBreakpoint() {\n    // If the correct rendering element isn't in use yet, build it from scratch\n    this.build();\n  }\n}\n\nPFElement.create(PfeContentSet);\n\nexport default PfeContentSet;\n"],"names":["window","NodeList","prototype","forEach","callback","thisArg","i","this","length","call","Object","assign","defineProperty","target","varArgs","TypeError","to","index","arguments","nextSource","nextKey","hasOwnProperty","CONTENT_MUTATION_CONFIG","PfeContentSet","PFElement","breakpointValue","breakpoint","parseInt","replace","parentNode","offsetWidth","outerWidth","querySelectorAll","views","viewAll","filter","PfeTabs","tag","PfeAccordion","includes","view","tagName","toLowerCase","querySelector","hasLightDOM","content","shadowRoot","valid","assignedNodes","node","nodeName","_this2","_isHeader","_isPanel","pfeType","combo","inheritProperties","obj","newObj","entries","key","value","observer","cascade","alias","tabProps","properties","accordionProps","dependentProps","String","id","hasValidLightDOM","build","then","ResizeObserver","_this3","parentElement","_resizeObserver","observe","error","errorMsg","_observer","disconnect","Promise","resolve","reject","componentName","_this4","isTab","item","remove","newEl","document","createElement","setAttribute","appendChild","_build","mutationsList","isIE11","nodes","mutation","type","addedNodes","hasAttribute","removedNodes","_removeNodes","_updateNode","textContent","el","match","list","_this5","_removeNode","hasChildNodes","removeAttribute","connection","getAttribute","warn","_findConnection","removeChild","sets","template","_cleanSet","fragment","createDocumentFragment","header","panel","wrapper","innerHTML","trim","templateMarkup","cloneNode","_this6","region","idx","section","piece","regionId","RegExp","randomId","clone","set","_this7","_this8","contentTemplate","pfeId","rawSets","children","_buildSets","all","customElements","whenDefined","selectedIndex","MSInputMethodContext","documentMode","_this","bind","_mutationHandler","_resizeHandler","MutationObserver","create"],"mappings":"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"}